# Generated by Django 4.2.23 on 2025-10-28 18:07

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0013_add_passwordless_login_tokens'),
        ('brands', '0009_brand_subtype'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('integrations', '0006_add_employee_roles'),
    ]

    operations = [
        migrations.CreateModel(
            name='GoogleLocation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('google_location_id', models.CharField(db_index=True, help_text='Google Business Profile location ID', max_length=200, unique=True)),
                ('google_location_name', models.CharField(help_text='Location name from Google', max_length=200)),
                ('address', models.TextField(blank=True, help_text='Full address from Google')),
                ('is_active', models.BooleanField(default=True, help_text='Location is active in Google')),
                ('average_rating', models.DecimalField(blank=True, decimal_places=2, help_text='Current average rating from Google', max_digits=3, null=True)),
                ('total_review_count', models.IntegerField(default=0, help_text='Total reviews on Google')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('synced_at', models.DateTimeField(blank=True, help_text='Last sync from Google', null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='google_locations', to='accounts.account')),
                ('store', models.ForeignKey(blank=True, help_text='PeakOps store this location maps to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='google_locations', to='brands.store')),
            ],
            options={
                'verbose_name': 'Google Location',
                'verbose_name_plural': 'Google Locations',
                'db_table': 'google_locations',
            },
        ),
        migrations.CreateModel(
            name='GoogleReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('google_review_id', models.CharField(db_index=True, help_text='Google review ID', max_length=200, unique=True)),
                ('reviewer_name', models.CharField(blank=True, help_text='Reviewer display name', max_length=200)),
                ('rating', models.IntegerField(help_text='Star rating 1-5')),
                ('review_text', models.TextField(blank=True, help_text='Review comment text')),
                ('review_reply', models.TextField(blank=True, help_text='Business owner reply')),
                ('review_created_at', models.DateTimeField(db_index=True, help_text='When review was posted on Google')),
                ('synced_at', models.DateTimeField(auto_now=True, help_text='Last sync from Google')),
                ('needs_analysis', models.BooleanField(db_index=True, default=True, help_text='Review needs AI analysis')),
                ('analyzed_at', models.DateTimeField(blank=True, help_text='When AI analysis was completed', null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='google_reviews', to='accounts.account')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='integrations.googlelocation')),
            ],
            options={
                'verbose_name': 'Google Review',
                'verbose_name_plural': 'Google Reviews',
                'db_table': 'google_reviews',
                'ordering': ['-review_created_at'],
            },
        ),
        migrations.CreateModel(
            name='GoogleReviewsConfig',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('access_token_encrypted', models.BinaryField(help_text='Encrypted Google OAuth access token')),
                ('refresh_token_encrypted', models.BinaryField(help_text='Encrypted Google OAuth refresh token')),
                ('token_expires_at', models.DateTimeField(help_text='When the access token expires')),
                ('google_account_id', models.CharField(help_text='Google Business Profile account ID', max_length=200)),
                ('is_active', models.BooleanField(default=True, help_text='Whether integration is enabled')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Last successful review sync', null=True)),
                ('sync_frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly')], default='daily', help_text='How often to sync reviews', max_length=20)),
                ('min_rating_for_analysis', models.IntegerField(default=3, help_text='Only analyze reviews with rating at or below this (1-5)')),
                ('auto_generate_checks', models.BooleanField(default=True, help_text='Automatically create micro-checks from review patterns')),
                ('min_reviews_for_check', models.IntegerField(default=3, help_text='Minimum similar reviews needed before generating a micro-check')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account', models.OneToOneField(help_text='Account that owns this integration', on_delete=django.db.models.deletion.CASCADE, related_name='google_reviews_config', to='accounts.account')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_google_reviews_configs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Google Reviews Configuration',
                'verbose_name_plural': 'Google Reviews Configurations',
                'db_table': 'google_reviews_configs',
            },
        ),
        migrations.CreateModel(
            name='ReviewSyncLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sync_type', models.CharField(choices=[('LOCATIONS', 'Locations'), ('REVIEWS', 'Reviews'), ('FULL', 'Full Sync')], max_length=20)),
                ('status', models.CharField(choices=[('SUCCESS', 'Success'), ('PARTIAL', 'Partial Success'), ('FAILED', 'Failed')], max_length=20)),
                ('items_synced', models.IntegerField(default=0, help_text='Number of items successfully synced')),
                ('errors_count', models.IntegerField(default=0, help_text='Number of errors encountered')),
                ('error_details', models.JSONField(blank=True, default=dict, help_text='Details of any errors that occurred')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration_seconds', models.FloatField(blank=True, null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_sync_logs', to='accounts.account')),
            ],
            options={
                'verbose_name': 'Review Sync Log',
                'verbose_name_plural': 'Review Sync Logs',
                'db_table': 'review_sync_logs',
                'ordering': ['-started_at'],
                'indexes': [models.Index(fields=['account', 'sync_type', '-started_at'], name='review_sync_account_eb02c7_idx')],
            },
        ),
        migrations.CreateModel(
            name='GoogleReviewAnalysis',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('topics', models.JSONField(default=list, help_text="List of topics mentioned (e.g., ['cleanliness', 'service'])")),
                ('sentiment_score', models.FloatField(help_text='Sentiment score from -1.0 (very negative) to 1.0 (very positive)')),
                ('actionable_issues', models.JSONField(default=list, help_text='List of specific actionable problems identified')),
                ('suggested_category', models.CharField(blank=True, help_text="Suggested micro-check category (e.g., 'cleanliness', 'service')", max_length=100)),
                ('model_used', models.CharField(help_text='AI model that performed analysis', max_length=100)),
                ('confidence', models.FloatField(blank=True, help_text='Confidence score for analysis (0.0-1.0)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processing_time_ms', models.IntegerField(blank=True, help_text='Time taken to analyze (milliseconds)', null=True)),
                ('review', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analysis', to='integrations.googlereview')),
            ],
            options={
                'verbose_name': 'Google Review Analysis',
                'verbose_name_plural': 'Google Review Analyses',
                'db_table': 'google_review_analyses',
                'indexes': [models.Index(fields=['suggested_category', '-created_at'], name='google_revi_suggest_09da28_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='googlereview',
            index=models.Index(fields=['location', 'rating', '-review_created_at'], name='google_revi_locatio_2cd49e_idx'),
        ),
        migrations.AddIndex(
            model_name='googlereview',
            index=models.Index(fields=['account', '-review_created_at'], name='google_revi_account_62efa5_idx'),
        ),
        migrations.AddIndex(
            model_name='googlereview',
            index=models.Index(fields=['needs_analysis', 'rating'], name='google_revi_needs_a_ba77fa_idx'),
        ),
        migrations.AddIndex(
            model_name='googlelocation',
            index=models.Index(fields=['account', 'is_active'], name='google_loca_account_ca8ce6_idx'),
        ),
        migrations.AddIndex(
            model_name='googlelocation',
            index=models.Index(fields=['store'], name='google_loca_store_i_ffebe1_idx'),
        ),
    ]
