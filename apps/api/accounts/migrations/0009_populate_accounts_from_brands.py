# Generated by Django 4.2.25 on 2025-10-22 01:37

from django.db import migrations


def populate_accounts_from_brands(apps, schema_editor):
    """
    Create an Account for each existing Brand.

    This migration enables the multi-tenant architecture where multiple franchisees
    can operate under the same brand, each with their own stores and integrations.
    """
    Account = apps.get_model('accounts', 'Account')
    Brand = apps.get_model('brands', 'Brand')
    User = apps.get_model('accounts', 'User')
    Store = apps.get_model('brands', 'Store')

    for brand in Brand.objects.all():
        # Find the first ADMIN or OWNER user for this brand (via stores)
        owner = User.objects.filter(
            store__brand=brand,
            role__in=['ADMIN', 'OWNER']
        ).first()

        # If no admin/owner found, use first user with a store in this brand
        if not owner:
            owner = User.objects.filter(store__brand=brand).first()

        # If still no owner (brand has no users), skip for now
        # This will need to be fixed manually by creating a user first
        if not owner:
            print(f"Warning: Skipping Brand '{brand.name}' - no users found")
            continue

        # Create an Account for this brand
        account = Account.objects.create(
            name=f"{brand.name} Account",
            brand=brand,
            owner=owner,
            company_name=brand.name,
            is_active=brand.is_active
        )

        # Assign all stores of this brand to the new account
        Store.objects.filter(brand=brand).update(account=account)

        # Assign all users whose stores belong to this brand to the account
        user_ids = Store.objects.filter(account=account).values_list('user__id', flat=True)
        User.objects.filter(id__in=user_ids).update(account=account)

        print(f"Created Account '{account.name}' for Brand '{brand.name}'")


def reverse_populate_accounts(apps, schema_editor):
    """Reverse migration: delete all accounts"""
    Account = apps.get_model('accounts', 'Account')
    Account.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0008_account_user_account_and_more'),
        ('brands', '0008_store_account_alter_store_brand'),
    ]

    operations = [
        migrations.RunPython(populate_accounts_from_brands, reverse_populate_accounts),
    ]
