# Generated by Django 4.2.24 on 2025-10-07 15:41

from django.db import migrations


def migrate_trial_admin_to_owner(apps, schema_editor):
    """
    Convert all TRIAL_ADMIN users to OWNER role and set is_trial_user=True.
    This simplifies the role system by separating trial status from role.
    """
    User = apps.get_model('accounts', 'User')

    # Find all TRIAL_ADMIN users
    trial_admins = User.objects.filter(role='TRIAL_ADMIN')
    count = trial_admins.count()

    if count > 0:
        print(f"\nMigrating {count} TRIAL_ADMIN users to OWNER...")

        # Update all TRIAL_ADMIN users to OWNER with is_trial_user=True
        trial_admins.update(role='OWNER', is_trial_user=True)

        # Print migrated users for verification
        for user in User.objects.filter(role='OWNER', is_trial_user=True):
            print(f"  âœ“ {user.email} -> role=OWNER, is_trial_user=True")

        print(f"Successfully migrated {count} users.\n")
    else:
        print("\nNo TRIAL_ADMIN users found to migrate.\n")


def reverse_migration(apps, schema_editor):
    """
    Reverse the migration by converting OWNER users with is_trial_user=True back to TRIAL_ADMIN.
    """
    User = apps.get_model('accounts', 'User')

    # Find all OWNER users who are trial users
    trial_owners = User.objects.filter(role='OWNER', is_trial_user=True)
    count = trial_owners.count()

    if count > 0:
        print(f"\nReverting {count} trial OWNER users back to TRIAL_ADMIN...")
        trial_owners.update(role='TRIAL_ADMIN', is_trial_user=False)
        print(f"Successfully reverted {count} users.\n")


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0005_add_owner_role'),
    ]

    operations = [
        migrations.RunPython(migrate_trial_admin_to_owner, reverse_migration),
    ]
