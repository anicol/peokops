# Generated by Django 4.2.23 on 2025-10-06 15:36

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('brands', '0003_brand_has_enterprise_access'),
    ]

    operations = [
        migrations.CreateModel(
            name='MediaAsset',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('kind', models.CharField(choices=[('IMAGE', 'Image'), ('VIDEO', 'Video')], max_length=10)),
                ('s3_key', models.CharField(max_length=512, unique=True)),
                ('s3_bucket', models.CharField(max_length=100)),
                ('sha256', models.CharField(db_index=True, max_length=64)),
                ('bytes', models.IntegerField()),
                ('width', models.IntegerField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('duration_seconds', models.FloatField(blank=True, help_text='For video', null=True)),
                ('blurred', models.BooleanField(default=False, help_text='Face/brand blur applied')),
                ('retention_policy', models.CharField(choices=[('COACHING_7D', 'Coaching 7 Days'), ('ENTERPRISE_90D', 'Enterprise 90 Days'), ('ENTERPRISE_365D', 'Enterprise 1 Year'), ('PERMANENT', 'Permanent')], default='COACHING_7D', max_length=20)),
                ('expires_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_media_assets', to=settings.AUTH_USER_MODEL)),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='brands.store')),
            ],
            options={
                'db_table': 'media_assets',
            },
        ),
        migrations.CreateModel(
            name='MicroCheckAssignment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('access_token_hash', models.CharField(db_index=True, max_length=64, unique=True)),
                ('token_expires_at', models.DateTimeField()),
                ('purpose', models.CharField(choices=[('RUN_ACCESS', 'Run Access'), ('REMINDER', 'Reminder')], default='RUN_ACCESS', max_length=20)),
                ('scope', models.JSONField(default=dict, help_text='Token scope: {run_id, store_id}')),
                ('max_uses', models.IntegerField(default=1)),
                ('use_count', models.IntegerField(default=0)),
                ('first_used_at', models.DateTimeField(blank=True, null=True)),
                ('last_used_at', models.DateTimeField(blank=True, null=True)),
                ('ip_last_used', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent_last_used', models.TextField(blank=True)),
                ('revoked_at', models.DateTimeField(blank=True, null=True)),
                ('sent_via', models.CharField(choices=[('SMS', 'SMS'), ('EMAIL', 'Email'), ('PUSH', 'Push Notification'), ('WHATSAPP', 'WhatsApp')], max_length=20)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('opened_at', models.DateTimeField(blank=True, null=True)),
                ('claimed_at', models.DateTimeField(blank=True, null=True)),
                ('retention_policy', models.CharField(choices=[('COACHING', 'Coaching'), ('ENTERPRISE', 'Enterprise')], default='COACHING', max_length=20)),
                ('retain_until', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('claimed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='claimed_micro_check_assignments', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_micro_check_assignments', to=settings.AUTH_USER_MODEL)),
                ('rotated_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rotated_to', to='micro_checks.microcheckassignment')),
            ],
            options={
                'db_table': 'micro_check_assignments',
            },
        ),
        migrations.CreateModel(
            name='MicroCheckRun',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('scheduled_for', models.DateField(help_text="Date in store's local timezone")),
                ('daypart', models.CharField(choices=[('MORNING', 'Morning (6am-12pm)'), ('AFTERNOON', 'Afternoon (12pm-6pm)'), ('EVENING', 'Evening (6pm-12am)'), ('ANY', 'Any Time')], default='ANY', max_length=20)),
                ('sequence', models.PositiveSmallIntegerField(default=1, help_text='Run number for this day')),
                ('store_timezone', models.CharField(max_length=50)),
                ('created_via', models.CharField(choices=[('SMS', 'SMS'), ('EMAIL', 'Email'), ('PUSH', 'Push Notification'), ('WHATSAPP', 'WhatsApp'), ('MANUAL', 'Manual')], max_length=20)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('EXPIRED', 'Expired')], default='PENDING', max_length=20)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('retention_policy', models.CharField(choices=[('COACHING', 'Coaching'), ('ENTERPRISE', 'Enterprise')], default='COACHING', max_length=20)),
                ('retain_until', models.DateTimeField(blank=True, help_text='Auto-calculated based on mode', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='completed_micro_check_runs', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_micro_check_runs', to=settings.AUTH_USER_MODEL)),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='micro_check_runs', to='brands.store')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_micro_check_runs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'micro_check_runs',
            },
        ),
        migrations.CreateModel(
            name='MicroCheckTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('category', models.CharField(choices=[('PPE', 'Personal Protective Equipment'), ('SAFETY', 'Safety'), ('CLEANLINESS', 'Cleanliness'), ('UNIFORM', 'Uniform Compliance'), ('MENU_BOARD', 'Menu Board'), ('FOOD_SAFETY', 'Food Safety & Hygiene'), ('EQUIPMENT', 'Equipment & Maintenance'), ('OPERATIONAL', 'Operational Compliance'), ('FOOD_QUALITY', 'Food Quality & Presentation'), ('STAFF_BEHAVIOR', 'Staff Behavior'), ('OTHER', 'Other')], db_index=True, max_length=20)),
                ('severity', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('CRITICAL', 'Critical')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('success_criteria', models.TextField(help_text="What 'PASS' looks like")),
                ('version', models.IntegerField(default=1)),
                ('default_photo_required', models.BooleanField(default=False)),
                ('default_video_required', models.BooleanField(default=False)),
                ('expected_completion_seconds', models.IntegerField(default=30)),
                ('ai_validation_enabled', models.BooleanField(default=False)),
                ('ai_validation_prompt', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_micro_check_templates', to=settings.AUTH_USER_MODEL)),
                ('parent_template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_templates', to='micro_checks.microchecktemplate')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_micro_check_templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'micro_check_templates',
            },
        ),
        migrations.CreateModel(
            name='MicroCheckStreak',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_streak', models.IntegerField(default=0)),
                ('longest_streak', models.IntegerField(default=0)),
                ('total_completions', models.IntegerField(default=0)),
                ('last_completion_date', models.DateField(blank=True, help_text='Date in store TZ', null=True)),
                ('badges', models.JSONField(default=list, help_text='Array of earned badge IDs')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='brands.store')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'micro_check_streaks',
            },
        ),
        migrations.CreateModel(
            name='MicroCheckRunItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('order', models.PositiveSmallIntegerField(help_text='1, 2, or 3')),
                ('photo_required', models.BooleanField(default=False)),
                ('photo_required_reason', models.CharField(blank=True, choices=[('FIRST_CHECK_OF_WEEK', 'First Check of Week'), ('CRITICAL_CATEGORY', 'Critical Category'), ('PRIOR_FAIL', 'Prior Failure'), ('RANDOM_AUDIT', 'Random Audit'), ('ALWAYS', 'Always Required')], max_length=30)),
                ('video_required', models.BooleanField(default=False)),
                ('template_version', models.IntegerField()),
                ('title_snapshot', models.CharField(max_length=200)),
                ('success_criteria_snapshot', models.TextField()),
                ('category_snapshot', models.CharField(choices=[('PPE', 'Personal Protective Equipment'), ('SAFETY', 'Safety'), ('CLEANLINESS', 'Cleanliness'), ('UNIFORM', 'Uniform Compliance'), ('MENU_BOARD', 'Menu Board'), ('FOOD_SAFETY', 'Food Safety & Hygiene'), ('EQUIPMENT', 'Equipment & Maintenance'), ('OPERATIONAL', 'Operational Compliance'), ('FOOD_QUALITY', 'Food Quality & Presentation'), ('STAFF_BEHAVIOR', 'Staff Behavior'), ('OTHER', 'Other')], max_length=20)),
                ('severity_snapshot', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('CRITICAL', 'Critical')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='micro_checks.microcheckrun')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='micro_checks.microchecktemplate')),
            ],
            options={
                'db_table': 'micro_check_run_items',
            },
        ),
        migrations.CreateModel(
            name='MicroCheckResponse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('category', models.CharField(choices=[('PPE', 'Personal Protective Equipment'), ('SAFETY', 'Safety'), ('CLEANLINESS', 'Cleanliness'), ('UNIFORM', 'Uniform Compliance'), ('MENU_BOARD', 'Menu Board'), ('FOOD_SAFETY', 'Food Safety & Hygiene'), ('EQUIPMENT', 'Equipment & Maintenance'), ('OPERATIONAL', 'Operational Compliance'), ('FOOD_QUALITY', 'Food Quality & Presentation'), ('STAFF_BEHAVIOR', 'Staff Behavior'), ('OTHER', 'Other')], db_index=True, max_length=20)),
                ('severity_snapshot', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('CRITICAL', 'Critical')], max_length=20)),
                ('status', models.CharField(choices=[('PASS', 'Pass'), ('FAIL', 'Fail'), ('NEEDS_ATTENTION', 'Needs Attention'), ('UNCERTAIN', 'Uncertain'), ('SKIPPED', 'Skipped')], db_index=True, max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('skip_reason', models.CharField(blank=True, choices=[('AREA_CLOSED', 'Area Closed'), ('IN_USE', 'In Use'), ('NO_SUPPLIES', 'No Supplies'), ('EQUIPMENT_DOWN', 'Equipment Down'), ('STAFF_UNAVAILABLE', 'Staff Unavailable'), ('OTHER', 'Other')], max_length=30)),
                ('skip_reason_detail', models.TextField(blank=True)),
                ('ai_confidence', models.FloatField(blank=True, null=True)),
                ('ai_validated', models.BooleanField(default=False)),
                ('ai_model_version', models.CharField(blank=True, max_length=50)),
                ('ai_inference_ms', models.IntegerField(blank=True, help_text='AI latency in ms', null=True)),
                ('rule_version', models.CharField(blank=True, max_length=50)),
                ('overridden_at', models.DateTimeField(blank=True, null=True)),
                ('override_reason', models.TextField(blank=True)),
                ('original_status', models.CharField(blank=True, max_length=20)),
                ('original_ai_confidence', models.FloatField(blank=True, null=True)),
                ('completion_seconds', models.IntegerField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('local_completed_date', models.DateField(help_text='Date in store TZ for streak queries')),
                ('retention_policy', models.CharField(choices=[('COACHING', 'Coaching'), ('ENTERPRISE', 'Enterprise')], default='COACHING', max_length=20)),
                ('retain_until', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='micro_checks.microcheckassignment')),
                ('completed_by', models.ForeignKey(blank=True, help_text='Nullable for no-login flows', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='completed_micro_check_responses', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_micro_check_responses', to=settings.AUTH_USER_MODEL)),
                ('media', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='responses', to='micro_checks.mediaasset')),
                ('overridden_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='micro_check_response_overrides', to=settings.AUTH_USER_MODEL)),
                ('run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='micro_checks.microcheckrun')),
                ('run_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='micro_checks.microcheckrunitem')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='brands.store')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='micro_checks.microchecktemplate')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_micro_check_responses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'micro_check_responses',
            },
        ),
        migrations.AddField(
            model_name='microcheckassignment',
            name='run',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='micro_checks.microcheckrun'),
        ),
        migrations.AddField(
            model_name='microcheckassignment',
            name='sent_to',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='micro_check_assignments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='microcheckassignment',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='brands.store'),
        ),
        migrations.AddField(
            model_name='microcheckassignment',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_micro_check_assignments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='CorrectiveAction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('category', models.CharField(choices=[('PPE', 'Personal Protective Equipment'), ('SAFETY', 'Safety'), ('CLEANLINESS', 'Cleanliness'), ('UNIFORM', 'Uniform Compliance'), ('MENU_BOARD', 'Menu Board'), ('FOOD_SAFETY', 'Food Safety & Hygiene'), ('EQUIPMENT', 'Equipment & Maintenance'), ('OPERATIONAL', 'Operational Compliance'), ('FOOD_QUALITY', 'Food Quality & Presentation'), ('STAFF_BEHAVIOR', 'Staff Behavior'), ('OTHER', 'Other')], db_index=True, max_length=20)),
                ('due_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('OPEN', 'Open'), ('IN_PROGRESS', 'In Progress'), ('RESOLVED', 'Resolved'), ('DISMISSED', 'Dismissed')], default='OPEN', max_length=20)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True)),
                ('retention_policy', models.CharField(choices=[('COACHING', 'Coaching'), ('ENTERPRISE', 'Enterprise')], default='COACHING', max_length=20)),
                ('retain_until', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('after_media', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ca_after', to='micro_checks.mediaasset')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('before_media', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ca_before', to='micro_checks.mediaasset')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_corrective_actions', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_corrective_actions', to=settings.AUTH_USER_MODEL)),
                ('response', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='corrective_action', to='micro_checks.microcheckresponse')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='brands.store')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_corrective_actions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'corrective_actions',
            },
        ),
        migrations.CreateModel(
            name='CheckCoverage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_visual_verified_at', models.DateTimeField()),
                ('last_visual_status', models.CharField(choices=[('PASS', 'Pass'), ('FAIL', 'Fail'), ('NEEDS_ATTENTION', 'Needs Attention'), ('UNCERTAIN', 'Uncertain'), ('SKIPPED', 'Skipped')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_verified_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='brands.store')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='micro_checks.microchecktemplate')),
            ],
            options={
                'db_table': 'check_coverage',
            },
        ),
        migrations.AddIndex(
            model_name='microchecktemplate',
            index=models.Index(fields=['category', 'is_active'], name='micro_check_categor_260991_idx'),
        ),
        migrations.AddIndex(
            model_name='microchecktemplate',
            index=models.Index(fields=['version', 'parent_template'], name='micro_check_version_7d1740_idx'),
        ),
        migrations.AddIndex(
            model_name='microcheckstreak',
            index=models.Index(fields=['user', 'store'], name='micro_check_user_id_4ffb0c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='microcheckstreak',
            unique_together={('user', 'store')},
        ),
        migrations.AddIndex(
            model_name='microcheckrunitem',
            index=models.Index(fields=['run', 'order'], name='micro_check_run_id_edfac3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='microcheckrunitem',
            unique_together={('run', 'order'), ('run', 'template')},
        ),
        migrations.AddIndex(
            model_name='microcheckrun',
            index=models.Index(fields=['store', 'scheduled_for', 'status'], name='micro_check_store_i_38a5b9_idx'),
        ),
        migrations.AddIndex(
            model_name='microcheckrun',
            index=models.Index(fields=['store', 'status', 'scheduled_for'], name='micro_check_store_i_382c7e_idx'),
        ),
        migrations.AddIndex(
            model_name='microcheckrun',
            index=models.Index(fields=['status', 'scheduled_for'], name='micro_check_status_37638e_idx'),
        ),
        migrations.AddIndex(
            model_name='microcheckrun',
            index=models.Index(fields=['retain_until'], name='micro_check_retain__4cf227_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='microcheckrun',
            unique_together={('store', 'scheduled_for', 'sequence')},
        ),
        migrations.AddIndex(
            model_name='microcheckresponse',
            index=models.Index(fields=['store', 'completed_at'], name='micro_check_store_i_a9fe30_idx'),
        ),
        migrations.AddIndex(
            model_name='microcheckresponse',
            index=models.Index(fields=['store', 'category', 'status', 'completed_at'], name='micro_check_store_i_081163_idx'),
        ),
        migrations.AddIndex(
            model_name='microcheckresponse',
            index=models.Index(fields=['category', 'status', 'completed_at'], name='micro_check_categor_188067_idx'),
        ),
        migrations.AddIndex(
            model_name='microcheckresponse',
            index=models.Index(fields=['store', 'status'], name='micro_check_store_i_578835_idx'),
        ),
        migrations.AddIndex(
            model_name='microcheckresponse',
            index=models.Index(fields=['completed_by', 'completed_at'], name='micro_check_complet_618ece_idx'),
        ),
        migrations.AddIndex(
            model_name='microcheckresponse',
            index=models.Index(fields=['store', 'local_completed_date'], name='micro_check_store_i_0f9715_idx'),
        ),
        migrations.AddIndex(
            model_name='microcheckresponse',
            index=models.Index(fields=['retention_policy', 'retain_until'], name='micro_check_retenti_fe6c60_idx'),
        ),
        migrations.AddConstraint(
            model_name='microcheckresponse',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('status', 'SKIPPED'), _negated=True), models.Q(('skip_reason', ''), _negated=True), _connector='OR'), name='skipped_has_reason'),
        ),
        migrations.AlterUniqueTogether(
            name='microcheckresponse',
            unique_together={('run', 'template')},
        ),
        migrations.AddIndex(
            model_name='microcheckassignment',
            index=models.Index(fields=['access_token_hash'], name='micro_check_access__16c4ec_idx'),
        ),
        migrations.AddIndex(
            model_name='microcheckassignment',
            index=models.Index(fields=['run', 'sent_to'], name='micro_check_run_id_4f9b5f_idx'),
        ),
        migrations.AddIndex(
            model_name='microcheckassignment',
            index=models.Index(fields=['sent_to', 'sent_at'], name='micro_check_sent_to_63cf06_idx'),
        ),
        migrations.AddIndex(
            model_name='microcheckassignment',
            index=models.Index(fields=['store', 'sent_at'], name='micro_check_store_i_d5ae94_idx'),
        ),
        migrations.AddIndex(
            model_name='mediaasset',
            index=models.Index(fields=['store', 'created_at'], name='media_asset_store_i_97d46e_idx'),
        ),
        migrations.AddIndex(
            model_name='mediaasset',
            index=models.Index(fields=['sha256'], name='media_asset_sha256_3daf96_idx'),
        ),
        migrations.AddIndex(
            model_name='mediaasset',
            index=models.Index(fields=['retention_policy', 'expires_at'], name='media_asset_retenti_bbc0ae_idx'),
        ),
        migrations.AddIndex(
            model_name='correctiveaction',
            index=models.Index(fields=['store', 'status', 'due_at'], name='corrective__store_i_8c642e_idx'),
        ),
        migrations.AddIndex(
            model_name='correctiveaction',
            index=models.Index(fields=['category', 'status'], name='corrective__categor_ee027e_idx'),
        ),
        migrations.AddIndex(
            model_name='correctiveaction',
            index=models.Index(fields=['assigned_to', 'status'], name='corrective__assigne_ab547a_idx'),
        ),
        migrations.AddIndex(
            model_name='correctiveaction',
            index=models.Index(fields=['retention_policy', 'retain_until'], name='corrective__retenti_7aa7ec_idx'),
        ),
        migrations.AddIndex(
            model_name='checkcoverage',
            index=models.Index(fields=['store', 'last_visual_verified_at'], name='check_cover_store_i_b14e29_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='checkcoverage',
            unique_together={('store', 'template')},
        ),
    ]
