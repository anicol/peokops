# Generated by Django 5.0 on 2025-09-23 22:04

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('brands', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Unique code within brand', max_length=50)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('config_json', models.JSONField(default=dict, help_text='Rule configuration parameters')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='brands.brand')),
            ],
            options={
                'db_table': 'rules',
                'ordering': ['brand', 'code'],
                'unique_together': {('brand', 'code')},
            },
        ),
        migrations.CreateModel(
            name='Upload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mode', models.CharField(choices=[('inspection', 'Inspection Mode'), ('coaching', 'Coaching Mode')], max_length=20)),
                ('s3_key', models.CharField(help_text='S3 object key for the video file', max_length=500)),
                ('status', models.CharField(choices=[('uploaded', 'Uploaded'), ('processing', 'Processing'), ('complete', 'Complete'), ('failed', 'Failed')], default='uploaded', max_length=20)),
                ('duration_s', models.IntegerField(blank=True, help_text='Video duration in seconds', null=True)),
                ('file_size', models.BigIntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('metadata', models.JSONField(default=dict, help_text='Video metadata from FFmpeg')),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this upload expires (coaching mode)', null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploads', to='brands.store')),
            ],
            options={
                'db_table': 'uploads',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Scorecard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scores_json', models.JSONField(default=dict, help_text='Detailed scores breakdown')),
                ('total_score', models.FloatField(help_text='Overall score 0-100')),
                ('ppe_score', models.FloatField(blank=True, null=True)),
                ('safety_score', models.FloatField(blank=True, null=True)),
                ('cleanliness_score', models.FloatField(blank=True, null=True)),
                ('uniform_score', models.FloatField(blank=True, null=True)),
                ('menu_board_score', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('upload', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='scorecard', to='uploads.upload')),
            ],
            options={
                'db_table': 'scorecards',
            },
        ),
        migrations.CreateModel(
            name='Detection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(help_text='Type of detection (PPE, safety, etc.)', max_length=100)),
                ('label', models.CharField(help_text='Specific label for the detected object', max_length=200)),
                ('confidence', models.FloatField(help_text='Confidence score 0-1')),
                ('frame_ts_ms', models.IntegerField(help_text='Frame timestamp in milliseconds')),
                ('bbox_json', models.JSONField(blank=True, help_text='Bounding box coordinates', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('upload', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='detections', to='uploads.upload')),
            ],
            options={
                'db_table': 'detections',
                'ordering': ['frame_ts_ms', 'type'],
            },
        ),
        migrations.CreateModel(
            name='Violation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('severity', models.CharField(choices=[('low', 'Low'), ('med', 'Medium'), ('high', 'High')], max_length=10)),
                ('evidence_frame_ts_ms', models.IntegerField(help_text='Frame timestamp with evidence')),
                ('evidence_s3_key', models.CharField(help_text='S3 key for evidence image', max_length=500)),
                ('status', models.CharField(choices=[('open', 'Open'), ('dismissed', 'Dismissed'), ('approved', 'Approved')], default='open', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_violations', to=settings.AUTH_USER_MODEL)),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='violations', to='uploads.rule')),
                ('upload', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='violations', to='uploads.upload')),
            ],
            options={
                'db_table': 'violations',
                'ordering': ['-severity', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('open', 'Open'), ('done', 'Done')], default='open', max_length=10)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tasks', to=settings.AUTH_USER_MODEL)),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='brands.store')),
                ('upload', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='uploads.upload')),
                ('violation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='uploads.violation')),
            ],
            options={
                'db_table': 'tasks',
                'ordering': ['-priority', 'due_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(help_text='Action performed (create, update, delete, etc.)', max_length=100)),
                ('entity', models.CharField(help_text='Entity type (Upload, Violation, etc.)', max_length=100)),
                ('entity_id', models.PositiveIntegerField(help_text='ID of the affected entity')),
                ('meta_json', models.JSONField(default=dict, help_text='Additional metadata about the action')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('actor_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'audit_logs',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['actor_user', 'created_at'], name='audit_logs_actor_u_b024de_idx'), models.Index(fields=['entity', 'entity_id'], name='audit_logs_entity_22e216_idx'), models.Index(fields=['action'], name='audit_logs_action_31f574_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='upload',
            index=models.Index(fields=['store', 'mode'], name='uploads_store_i_fc72f4_idx'),
        ),
        migrations.AddIndex(
            model_name='upload',
            index=models.Index(fields=['status'], name='uploads_status_832574_idx'),
        ),
        migrations.AddIndex(
            model_name='upload',
            index=models.Index(fields=['expires_at'], name='uploads_expires_4249d9_idx'),
        ),
        migrations.AddIndex(
            model_name='detection',
            index=models.Index(fields=['upload', 'type'], name='detections_upload__42e245_idx'),
        ),
        migrations.AddIndex(
            model_name='detection',
            index=models.Index(fields=['frame_ts_ms'], name='detections_frame_t_4e1dc4_idx'),
        ),
        migrations.AddIndex(
            model_name='violation',
            index=models.Index(fields=['upload', 'status'], name='violations_upload__d3a83d_idx'),
        ),
        migrations.AddIndex(
            model_name='violation',
            index=models.Index(fields=['severity'], name='violations_severit_a2f7d6_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['store', 'status'], name='tasks_store_i_e8f410_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['assigned_to', 'status'], name='tasks_assigne_801c9d_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['due_date'], name='tasks_due_dat_0359a9_idx'),
        ),
    ]
