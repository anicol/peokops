# Generated by Django 4.2.23 on 2025-10-02 18:11

from django.db import migrations, models
from django.db.models import Count


def cleanup_duplicate_videos(apps, schema_editor):
    """Remove duplicate videos from inspections - keep only the oldest video per inspection"""
    Video = apps.get_model('videos', 'Video')

    # Find inspections with multiple videos
    duplicates = Video.objects.filter(inspection__isnull=False).values('inspection_id').annotate(
        count=Count('id')
    ).filter(count__gt=1)

    for dup in duplicates:
        inspection_id = dup['inspection_id']
        # Get all videos for this inspection, ordered by created_at
        videos = Video.objects.filter(inspection_id=inspection_id).order_by('created_at')

        # Keep the first (oldest) video, unlink the rest
        videos_to_unlink = videos[1:]
        for video in videos_to_unlink:
            video.inspection = None
            video.save(update_fields=['inspection'])


def reverse_cleanup(apps, schema_editor):
    """No-op reverse migration"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('videos', '0003_add_inspection_fk_relationship'),
    ]

    operations = [
        # Step 1: Clean up any duplicate videos before adding constraint
        migrations.RunPython(cleanup_duplicate_videos, reverse_cleanup),
        # Step 2: Add uniqueness constraint
        migrations.AddConstraint(
            model_name='video',
            constraint=models.UniqueConstraint(condition=models.Q(('inspection__isnull', False)), fields=('inspection',), name='one_video_per_inspection_v1'),
        ),
    ]
